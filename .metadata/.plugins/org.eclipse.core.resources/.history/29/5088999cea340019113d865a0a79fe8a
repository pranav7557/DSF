#include <iostream>
#include "btree.h"
#include "stack.h"
#include "stack.cpp"

using namespace std;

btree::btree()
{
	root = NULL;
}

btree::~btree()
{
}

bnode *btree::maketree(char x)
{

	bnode *p = new bnode; //Allocating memory
	p->data = x;
	p->left = NULL;
	p->right = NULL;

	return (p);
}

void btree::create_exptree_post()
{
	string post;
	Stack<bnode *> s;							 //Object of node pointer
	cout << "\nEnter the postfix expression : "; //Accepting postfix expresssion
	cin >> post;

	int i = 0;
	while (post[i] != '\0')
	{
		char x = post[i];

		if (isOperand(x))
		{
			bnode *temp = maketree(x); //If its operand the push it into stack
			s.push(temp);
		}

		if (isOperator(x)) //If its operator,then create the tree
		{
			bnode *temp = maketree(x);
			temp->right = s.pop();
			temp->left = s.pop();
			s.push(temp); //Top 2 elements as left and right of that operator
		}
		i++;
	}
	root = s.pop(); //Return root for traversals
}

void btree::dispinorder(bnode *p) //Recurssive inorder left visit right
{
	if (p != NULL)
	{
		dispinorder(p->left);
		cout << p->data << " ";
		dispinorder(p->right);
	}
}

void btree::disppreorder(bnode *p) //Recurssive inorder  visit left right
{
	if (p != NULL)
	{
		cout << p->data << " ";
		disppreorder(p->left);
		disppreorder(p->right);
	}
}

void btree::disppostorder(bnode *p) //Recurssive inorder left  right  visit
{
	if (p != NULL)
	{
		disppostorder(p->left);
		disppostorder(p->right);
		cout << p->data << " ";
	}
}

void btree::dispInorderNonRec() //Left visit right
{
	bnode *p = root;
	Stack<bnode *> s;
	if (p == NULL)
	{
		cout << "Empty";
		return;
	}
	do
	{
		while (p != NULL) //Pushing all the respective roots in the stack	
		{
			s.push(p);
			p = p->left;
		}
		if (!s.isEmpty())
		{
			p = s.pop();
			cout << p->data << " "; //Displaying leftmost element in tree then root display and push right

			p = p->right;
		}

	} while (p != NULL || (!s.isEmpty()));
}

void btree::dispPreorderNonRec() //Visit left right
{
	Stack<bnode *> s;
	bnode *p = root;
	if (p == NULL)
	{
		cout << "Empty";
		return;
	}

	s.push(p); //Pushing root element

	while (!s.isEmpty())
	{
		p = s.pop();
		cout << p->data << " "; //Visiting first root then pushing right first and then left

		if (p->right != NULL) 
			s.push(p->right);
		if (p->left != NULL)
			s.push(p->left);
	}
}

void btree::disppostorderNonRec() 
{
	Stack<bnode *> s;
	bnode *p = root;
	bnode *prev = NULL; 

	if (p == NULL)
	{
		cout << "Empty";
		return;
	}

	s.push(p);

	while ((!s.isEmpty()))
	{
		p = s.pop(); 

		if (p->right == NULL && p->left == NULL) //If leaf,then printing the element
		{
			prev = p; 
			cout << p->data << " ";
		}
		else
		{
			if (p->right == prev || p->left == prev) //After printing checking as prev to print left then right then root
			{
				prev = p;
				cout << p->data << " ";
			}
			else
			{
				s.push(p);			 
				if (p->right != NULL) 
					s.push(p->right); 
				if (p->left != NULL)
					s.push(p->left);
			}
		}
	}
}

bool btree::isOperand(char x)
{
	if ((x >= '0' && x <= '9') || (x >= 'a' && x <= 'z') || (x >= 'A' && x <= 'Z'))
		return true;
	else
		return false;
}

bool btree::isOperator(char x)
{
	if (x == '^' || x == '*' || x == '/' || x == '+' || x == '-' || x == '%')
		return true;
	else
		return false;
}
